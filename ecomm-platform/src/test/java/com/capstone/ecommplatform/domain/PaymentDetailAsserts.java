package com.capstone.ecommplatform.domain;

import static com.capstone.ecommplatform.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PaymentDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentDetailAllPropertiesEquals(PaymentDetail expected, PaymentDetail actual) {
        assertPaymentDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentDetailAllUpdatablePropertiesEquals(PaymentDetail expected, PaymentDetail actual) {
        assertPaymentDetailUpdatableFieldsEquals(expected, actual);
        assertPaymentDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentDetailAutoGeneratedPropertiesEquals(PaymentDetail expected, PaymentDetail actual) {
        assertThat(expected)
            .as("Verify PaymentDetail auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentDetailUpdatableFieldsEquals(PaymentDetail expected, PaymentDetail actual) {
        assertThat(expected)
            .as("Verify PaymentDetail relevant properties")
            .satisfies(e -> assertThat(e.getOrderId()).as("check orderId").isEqualTo(actual.getOrderId()))
            .satisfies(e -> assertThat(e.getPaymentType()).as("check paymentType").isEqualTo(actual.getPaymentType()))
            .satisfies(
                e ->
                    assertThat(e.getPaymentAmount())
                        .as("check paymentAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPaymentAmount())
            )
            .satisfies(e -> assertThat(e.getPaymentDate()).as("check paymentDate").isEqualTo(actual.getPaymentDate()))
            .satisfies(e -> assertThat(e.getCardType()).as("check cardType").isEqualTo(actual.getCardType()))
            .satisfies(e -> assertThat(e.getCardNumber()).as("check cardNumber").isEqualTo(actual.getCardNumber()))
            .satisfies(e -> assertThat(e.getCardHolderName()).as("check cardHolderName").isEqualTo(actual.getCardHolderName()))
            .satisfies(e -> assertThat(e.getCardExpirationDate()).as("check cardExpirationDate").isEqualTo(actual.getCardExpirationDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentDetailUpdatableRelationshipsEquals(PaymentDetail expected, PaymentDetail actual) {}
}
