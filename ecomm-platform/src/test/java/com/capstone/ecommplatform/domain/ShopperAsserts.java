package com.capstone.ecommplatform.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ShopperAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShopperAllPropertiesEquals(Shopper expected, Shopper actual) {
        assertShopperAutoGeneratedPropertiesEquals(expected, actual);
        assertShopperAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShopperAllUpdatablePropertiesEquals(Shopper expected, Shopper actual) {
        assertShopperUpdatableFieldsEquals(expected, actual);
        assertShopperUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShopperAutoGeneratedPropertiesEquals(Shopper expected, Shopper actual) {
        assertThat(expected)
            .as("Verify Shopper auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShopperUpdatableFieldsEquals(Shopper expected, Shopper actual) {
        assertThat(expected)
            .as("Verify Shopper relevant properties")
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShopperUpdatableRelationshipsEquals(Shopper expected, Shopper actual) {}
}
