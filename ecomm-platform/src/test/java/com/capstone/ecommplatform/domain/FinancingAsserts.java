package com.capstone.ecommplatform.domain;

import static com.capstone.ecommplatform.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FinancingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancingAllPropertiesEquals(Financing expected, Financing actual) {
        assertFinancingAutoGeneratedPropertiesEquals(expected, actual);
        assertFinancingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancingAllUpdatablePropertiesEquals(Financing expected, Financing actual) {
        assertFinancingUpdatableFieldsEquals(expected, actual);
        assertFinancingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancingAutoGeneratedPropertiesEquals(Financing expected, Financing actual) {
        assertThat(expected)
            .as("Verify Financing auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancingUpdatableFieldsEquals(Financing expected, Financing actual) {
        assertThat(expected)
            .as("Verify Financing relevant properties")
            .satisfies(e -> assertThat(e.getProvider()).as("check provider").isEqualTo(actual.getProvider()))
            .satisfies(e -> assertThat(e.getInterestRate()).as("check interestRate").isEqualTo(actual.getInterestRate()))
            .satisfies(e -> assertThat(e.getLoanTerm()).as("check loanTerm").isEqualTo(actual.getLoanTerm()))
            .satisfies(
                e ->
                    assertThat(e.getDownPayment())
                        .as("check downPayment")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDownPayment())
            )
            .satisfies(e -> assertThat(e.getOrderId()).as("check orderId").isEqualTo(actual.getOrderId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancingUpdatableRelationshipsEquals(Financing expected, Financing actual) {}
}
