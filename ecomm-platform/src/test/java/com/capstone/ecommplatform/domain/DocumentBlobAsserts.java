package com.capstone.ecommplatform.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DocumentBlobAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentBlobAllPropertiesEquals(DocumentBlob expected, DocumentBlob actual) {
        assertDocumentBlobAutoGeneratedPropertiesEquals(expected, actual);
        assertDocumentBlobAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentBlobAllUpdatablePropertiesEquals(DocumentBlob expected, DocumentBlob actual) {
        assertDocumentBlobUpdatableFieldsEquals(expected, actual);
        assertDocumentBlobUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentBlobAutoGeneratedPropertiesEquals(DocumentBlob expected, DocumentBlob actual) {
        assertThat(expected)
            .as("Verify DocumentBlob auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentBlobUpdatableFieldsEquals(DocumentBlob expected, DocumentBlob actual) {
        assertThat(expected)
            .as("Verify DocumentBlob relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getPostPurchaseActivityId())
                        .as("check postPurchaseActivityId")
                        .isEqualTo(actual.getPostPurchaseActivityId())
            )
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getMimeType()).as("check mimeType").isEqualTo(actual.getMimeType()))
            .satisfies(e -> assertThat(e.getData()).as("check data").isEqualTo(actual.getData()))
            .satisfies(e -> assertThat(e.getDataContentType()).as("check data contenty type").isEqualTo(actual.getDataContentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentBlobUpdatableRelationshipsEquals(DocumentBlob expected, DocumentBlob actual) {}
}
